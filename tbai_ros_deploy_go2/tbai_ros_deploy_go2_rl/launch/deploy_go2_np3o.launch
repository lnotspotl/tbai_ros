<?xml version="1.0" encoding="utf-8"?>
<launch>
    <!-- Required arguments -->
    <arg name="controllers_ns"              default="anymal_d"/>
    <arg name="controllers_args"            default="joint_controller"/>
    <arg name="tbai_config_path"            default="$(find tbai_ros_deploy_go2_rl)/config/deploy_go2_rl.yaml"/>
    <arg name="description_name"            default="robot_description"/>
    <arg name="description_file"            default="$(find ocs2_robotic_assets)/resources/go2/urdf/go2_description.urdf"/>
    <arg name="network_interface"           default="eth0"/>
    <arg name="run_rviz"                    default="false"/>
    <arg name="run_virtual_joystick"        default="false"/>
    <arg name="run_go2_joystick"            default="true"/>
    <arg name="publish_pointcloud"          default="false"/>
    <arg name="mapping_device"              default="none"/>

    <!-- Upload config path to ROS param server -->
    <param name="tbai_config_path" type="string" value="$(arg tbai_config_path)"/>

    <!-- Set environment variable for config path -->
    <env name="TBAI_GLOBAL_CONFIG_PATH" value="$(arg tbai_config_path)"/>

    <!-- Set environment variable for robot description path -->
    <env name="TBAI_ROBOT_DESCRIPTION_PATH" value="$(arg description_file)"/>
    
    <!-- Set environment variable for network interface -->
    <env name="TBAI_GO2_NETWORK_INTERFACE" value="$(arg network_interface)"/>

    <env name="TBAI_GO2_PUBLISH_LIDAR" value="$(arg publish_pointcloud)"/>

    <param name="$(arg description_name)" command="$(find xacro)/xacro --inorder $(arg description_file)" />

    <!-- Launch simple node -->
    <node name="deploy_go2_rl" pkg="tbai_ros_deploy_go2_rl" type="deploy_go2_rl" output="screen"/>

    <!-- Launch virtual joystick -->
    <group if="$(arg run_virtual_joystick)">
        <node name="virtual_joystick" pkg="tbai_ros_utils" type="virtual_joystick.py" output="screen"/>
    </group>

    <group if="$(arg run_go2_joystick)">
        <node name="go2_joystick_node" pkg="tbai_ros_deploy_go2_rl" type="go2_joystick_node" output="screen"/>
    </group>

    <!-- Start Rviz visualizer -->
    <group if="$(arg run_rviz)">
        <arg name="rvizconfig" default="$(find tbai_ros_deploy_go2_rl)/launch/rviz/deploy_go2_rl.rviz" />
        <node pkg="rviz" type="rviz" name="rviz" args="-d $(arg rvizconfig)" output="screen" />
    </group>

    <group if="$(eval mapping_device == 'gpu')">
        <include file="$(find tbai_ros_deploy_go2_rl)/launch/go2_mapping.launch">
            <arg name="mapping_device" value="gpu"/>
        </include>
    </group>

    <group if="$(eval mapping_device == 'cpu')">
        <include file="$(find tbai_ros_deploy_go2_rl)/launch/go2_mapping.launch">
            <arg name="mapping_device" value="cpu"/>
        </include>
    </group>

    <group if="$(arg publish_pointcloud)">
        <!-- Include the RealSense camera launch file with parameters -->
        <include file="$(find realsense2_camera)/launch/rs_camera.launch">
            <arg name="depth_width" value="640"/>
            <arg name="depth_height" value="480"/>
            <arg name="depth_fps" value="6"/>
            <arg name="color_width" value="640"/>
            <arg name="color_height" value="480"/>
            <arg name="color_fps" value="6"/>
            <arg name="filters" value="pointcloud"/>
            <arg name="initial_reset" value="true"/>
        </include>

        <!-- Launch Hesai lidar -->
        <include file="$(find hesai_ros_driver)/launch/start.launch"/>

    </group>

    <node pkg="tf" type="static_transform_publisher" name="map2camera" args="0 0 0.00 0 0.22 0  /front_camera /camera_link 100"/>
    <node pkg="tf" type="static_transform_publisher" name="body2hesai" args="0.08 0 0.09 1.57 0.00 0  /base /hesai_lidar 100"/>

</launch>
